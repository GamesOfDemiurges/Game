function scene() {

	/* Private */
	var instance, // реализация Singleton
		masterCanvas, // Физический канвас на вьюпорте
		slaveCanvas; // Виртуальный канвас для промежуточной отрисовки

	// Создает виртуальный канвас
	// p.width
	// p.height
	function createSlaveCanvas( p ) {

		if ( !!slaveCanvas ) {
			// Канвас уже существует; может пригодится под ресайз окна

		} else {
			// Канваса еще нет, первичная инициализация

		}

		return slaveCanvas;
	}

	// Выполняет отрисовку объектов на виртуальном канвасе,
	// затем копирует его на физический
	// Таким образом отбрасывается необходимость в очистке физического канваса,
	// а также увеличивается скорость отрисовки
	function repaintCanvas() {

		// Сначала всё отрисовываем на виртуальном канвасе
		// Обход зарегистрированных объектов
		// Отрисовываются только те зарегистрированные объекты, которые попадают во вьюпорт

		// Затем проецируем виртуальный канвас на физический
	}

	/* Public */

	return {

		// Инициализация сцены
		// Передается селектор физического канваса
		// Сцена может быть только одна, выполняется проверка на её существование,
		// если она существует, возвращается готовый экземпляр, иначе создается новый
		// (паттерн Синглтон)

		// p.canvasSelector
		init: function ( p ) {

			if ( !!instance ) {

			} else {
				// где-то тут нужно добавить аттач события под ресайз окна
				instance = this;
			}

			return instance;
		},

		// На сцену в произвольный момент может быть добавлен один из существующих объектов
		// Сцена будет пытаться отрисовывать только добавленные на неё объекты
		// Аккуратное управление добавленными на сцену объектами может положительно сказаться на производительности
		// А может и не сказаться. В этом случае выпилим addObj и removeObj и будем оперировать только
		// фактом видимости во вьюпорте
		// p.obj
		addObj: function ( p ) {

		},

		// Удаление ненужного объекта из сцены (но не из списка зарегистрированных объектов!)
		removeObj ( p ): function () {

		}

		// Смещение сцены (не путать со смещением объекта)
		// p.dx
		// p.dy
		move: function ( p ) {

		}
	}
}
